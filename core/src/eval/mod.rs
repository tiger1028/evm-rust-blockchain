#[macro_use]
mod macros;
mod arithmetic;
mod bitwise;
mod misc;

use core::ops::{BitAnd, BitOr, BitXor};
use primitive_types::{H256, U256};
use crate::{ExitReason, ExitSucceed, ExitError, Machine, Opcode};

pub enum Control {
	Continue(usize),
	Exit(ExitReason),
	Jump(usize),
}

pub fn eval(state: &mut Machine, opcode: Opcode, position: usize) -> Control {
	match opcode {
		Opcode::Stop => Control::Exit(ExitSucceed::Stopped.into()),
		Opcode::Add => op2_u256_tuple!(state, overflowing_add),
		Opcode::Mul => op2_u256_tuple!(state, overflowing_mul),
		Opcode::Sub => op2_u256_tuple!(state, overflowing_sub),
		Opcode::Div => op2_u256_fn!(state, self::arithmetic::div),
		Opcode::SDiv => op2_u256_fn!(state, self::arithmetic::sdiv),
		Opcode::Mod => op2_u256_fn!(state, self::arithmetic::rem),
		Opcode::SMod => op2_u256_fn!(state, self::arithmetic::srem),
		Opcode::AddMod => op3_u256_fn!(state, self::arithmetic::addmod),
		Opcode::MulMod => op3_u256_fn!(state, self::arithmetic::mulmod),
		Opcode::Exp => op2_u256_fn!(state, self::arithmetic::exp),
		Opcode::SignExtend => op2_u256_fn!(state, self::arithmetic::signextend),
		Opcode::Lt => op2_u256_bool_ref!(state, lt),
		Opcode::Gt => op2_u256_bool_ref!(state, gt),
		Opcode::SLt => op2_u256_fn!(state, self::bitwise::slt),
		Opcode::SGt => op2_u256_fn!(state, self::bitwise::sgt),
		Opcode::Eq => op2_u256_bool_ref!(state, eq),
		Opcode::IsZero => op1_u256_fn!(state, self::bitwise::iszero),
		Opcode::And => op2_u256!(state, bitand),
		Opcode::Or => op2_u256!(state, bitor),
		Opcode::Xor => op2_u256!(state, bitxor),
		Opcode::Not => op1_u256_fn!(state, self::bitwise::not),
		Opcode::Byte => op2_u256_fn!(state, self::bitwise::byte),
		Opcode::Shl => op2_u256_fn!(state, self::bitwise::shl),
		Opcode::Shr => op2_u256_fn!(state, self::bitwise::shr),
		Opcode::Sar => op2_u256_fn!(state, self::bitwise::sar),
		Opcode::CodeSize => self::misc::codesize(state),
		Opcode::CodeCopy => self::misc::codecopy(state),
		Opcode::CallDataLoad => self::misc::calldataload(state),
		Opcode::CallDataSize => self::misc::calldatasize(state),
		Opcode::CallDataCopy => self::misc::calldatacopy(state),
		Opcode::Pop => self::misc::pop(state),
		Opcode::MLoad => self::misc::mload(state),
		Opcode::MStore => self::misc::mstore(state),
		Opcode::MStore8 => self::misc::mstore8(state),
		Opcode::Jump => self::misc::jump(state),
		Opcode::JumpI => self::misc::jumpi(state),
		Opcode::PC => self::misc::pc(state, position),
		Opcode::MSize => self::misc::msize(state),
		Opcode::JumpDest => Control::Continue(1),

		Opcode::Push1 => self::misc::push(state, 1, position),
		Opcode::Push2 => self::misc::push(state, 2, position),
		Opcode::Push3 => self::misc::push(state, 3, position),
		Opcode::Push4 => self::misc::push(state, 4, position),
		Opcode::Push5 => self::misc::push(state, 5, position),
		Opcode::Push6 => self::misc::push(state, 6, position),
		Opcode::Push7 => self::misc::push(state, 7, position),
		Opcode::Push8 => self::misc::push(state, 8, position),
		Opcode::Push9 => self::misc::push(state, 9, position),
		Opcode::Push10 => self::misc::push(state, 10, position),
		Opcode::Push11 => self::misc::push(state, 11, position),
		Opcode::Push12 => self::misc::push(state, 12, position),
		Opcode::Push13 => self::misc::push(state, 13, position),
		Opcode::Push14 => self::misc::push(state, 14, position),
		Opcode::Push15 => self::misc::push(state, 15, position),
		Opcode::Push16 => self::misc::push(state, 16, position),
		Opcode::Push17 => self::misc::push(state, 17, position),
		Opcode::Push18 => self::misc::push(state, 18, position),
		Opcode::Push19 => self::misc::push(state, 19, position),
		Opcode::Push20 => self::misc::push(state, 20, position),
		Opcode::Push21 => self::misc::push(state, 21, position),
		Opcode::Push22 => self::misc::push(state, 22, position),
		Opcode::Push23 => self::misc::push(state, 23, position),
		Opcode::Push24 => self::misc::push(state, 24, position),
		Opcode::Push25 => self::misc::push(state, 25, position),
		Opcode::Push26 => self::misc::push(state, 26, position),
		Opcode::Push27 => self::misc::push(state, 27, position),
		Opcode::Push28 => self::misc::push(state, 28, position),
		Opcode::Push29 => self::misc::push(state, 29, position),
		Opcode::Push30 => self::misc::push(state, 30, position),
		Opcode::Push31 => self::misc::push(state, 31, position),
		Opcode::Push32 => self::misc::push(state, 32, position),

		Opcode::Dup1 => self::misc::dup(state, 1),
		Opcode::Dup2 => self::misc::dup(state, 2),
		Opcode::Dup3 => self::misc::dup(state, 3),
		Opcode::Dup4 => self::misc::dup(state, 4),
		Opcode::Dup5 => self::misc::dup(state, 5),
		Opcode::Dup6 => self::misc::dup(state, 6),
		Opcode::Dup7 => self::misc::dup(state, 7),
		Opcode::Dup8 => self::misc::dup(state, 8),
		Opcode::Dup9 => self::misc::dup(state, 9),
		Opcode::Dup10 => self::misc::dup(state, 10),
		Opcode::Dup11 => self::misc::dup(state, 11),
		Opcode::Dup12 => self::misc::dup(state, 12),
		Opcode::Dup13 => self::misc::dup(state, 13),
		Opcode::Dup14 => self::misc::dup(state, 14),
		Opcode::Dup15 => self::misc::dup(state, 15),
		Opcode::Dup16 => self::misc::dup(state, 16),

		Opcode::Swap1 => self::misc::swap(state, 1),
		Opcode::Swap2 => self::misc::swap(state, 2),
		Opcode::Swap3 => self::misc::swap(state, 3),
		Opcode::Swap4 => self::misc::swap(state, 4),
		Opcode::Swap5 => self::misc::swap(state, 5),
		Opcode::Swap6 => self::misc::swap(state, 6),
		Opcode::Swap7 => self::misc::swap(state, 7),
		Opcode::Swap8 => self::misc::swap(state, 8),
		Opcode::Swap9 => self::misc::swap(state, 9),
		Opcode::Swap10 => self::misc::swap(state, 10),
		Opcode::Swap11 => self::misc::swap(state, 11),
		Opcode::Swap12 => self::misc::swap(state, 12),
		Opcode::Swap13 => self::misc::swap(state, 13),
		Opcode::Swap14 => self::misc::swap(state, 14),
		Opcode::Swap15 => self::misc::swap(state, 15),
		Opcode::Swap16 => self::misc::swap(state, 16),

		Opcode::Return => self::misc::ret(state),
		Opcode::Revert => self::misc::revert(state),
		Opcode::Invalid => Control::Exit(ExitError::DesignatedInvalid.into()),
	}
}
